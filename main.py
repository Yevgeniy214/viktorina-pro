from aiogram import Bot, Dispatcher, types, executor
import asyncio, json
from config import BOT_TOKEN, KASPI_CARD

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

with open("quiz_data.json", "r", encoding="utf-8") as f:
    quiz_data = json.load(f)

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìã –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", "üí≥ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞PRO üéì
–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.message_handler(lambda message: message.text == "üìã –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
async def start_quiz(message: types.Message):
    question = quiz_data[0]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for option in question["options"]:
        markup.add(option)
    await message.answer(question["question"], reply_markup=markup)

@dp.message_handler(lambda message: message.text == "üí≥ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
async def support(message: types.Message):
    await message.answer(f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –≤–æ—Ç –Ω–æ–º–µ—Ä Kaspi Gold:

üîó {KASPI_CARD}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)